<?php

namespace RL\SLAMBundle\Repository;

use Doctrine\ORM\EntityRepository;

use Doctrine\ORM\Query\Expr\Join;



/**
 * CandidatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CandidatRepository extends \Doctrine\ORM\EntityRepository 
{

   function listerCandidat($id) 
    {
        $qb = $this->_em->createQueryBuilder();
        
        $qb->select('c')
        ->from('RLSLAMBundle:Candidat', 'c')
        ->where ($qb->expr()->eq('c.id',':val'))
        ->setParameter('val',$id);
        $query = $qb->getQuery();
        $retour = $query->getResult();
        //$array = $query->getArrayResult();
        //$scalar = $query->getScalarResult();
        //$singleScalar = $query->getSingleScalarResult();
        return $retour;
     }
   
     function listerCandidatbis() 
    {
        $qb = $this->_em->createQueryBuilder('c');
        
        $qb->select('c')
        ->from('RLSLAMBundle:Candidat', 'c');
        
        $query = $qb->getQuery();
        $retour = $query->getResult();
        //$array = $query->getArrayResult();
        //$scalar = $query->getScalarResult();
        //$singleScalar = $query->getSingleScalarResult();
        return $retour;
     }
     
    function rechercherParSpec($id) 
    {
        $qb = $this->_em->createQueryBuilder('c');
        
        $qb->select('c')     
        ->from('RLSLAMBundle:Candidat', 'c')
        ->innerJoin('RLSLAMBundle:Specialite','s', Join::WITH, 's.id = c.specialite')
        ->where ('s.id = :val')
        ->setParameter('val',$id);        
        $query = $qb->getQuery();
        $result = $query->getResult();
       
        return $result;    
    }
    
    function compterSpec() 
    {   
        $qb = $this->_em->createQueryBuilder('c');
        
        $qb->addSelect('s.id','s.libelle','COUNT(c) AS effectif')
        ->from('RLSLAMBundle:Candidat', 'c')
        ->innerJoin('RLSLAMBundle:Specialite','s', Join::WITH, 's.id = c.specialite')
        ->groupBy('c.specialite');
              
        $query = $qb->getQuery();
        $result = $query->getResult();
       
        return $result;    
    }
        
    function delete($nom,$prenom){

            $qB = $this->_em->createQueryBuilder();
            
                $qB->delete('RLSLAMBundle:Candidat', 'c')
                ->where('c.nom = :nom')
                ->andWhere('c.prenom = :prenom')
                ->setParameter('nom', $nom)
                ->setParameter('prenom', $prenom)
                ->getQuery()
                ->execute();
                
            return $qB;
}
}